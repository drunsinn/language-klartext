'fileTypes': [
  'klartext'
  'H'
]
'firstLineMatch': '^(\\d+) +(BEGIN PGM) (.*\\.H) (MM|INCH) ?$'
'name': 'Klartext'
'scopeName': 'text.nc-code.klartext';
'patterns': [
    {
        'comment': 'line number'
        'match': '^(\\d+)'
        'name': 'base.comment'
    },
    {
        'comment': 'comment until the end of the line'
        'match': ';(.*)$'
        'name': 'base.comment'
    },
    {
        'comment': 'string between double quotes'
        'match': '"(.*)"'
        'name': 'base.string'
    },
    {
        'comment': 'outline'
        'match': '\\* - (.*)$'
        'name': 'base.comment'
    },
    {
        'comment': 'program head and foot'
        'match': '(BEGIN|END) (PGM) (.*?)\\b(MM|INCH) ?$'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.constant'
            '3':
                'name': 'base.variable'
            '4':
                'name': 'base.constant'
    },
    {
        'comment': 'block form cuboid'
        'match': '\\b(BLK FORM) (0.[12])( [XYZ] )?'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.constant'
            '3':
                'name': 'base.variable'
    },
    {
        'comment': 'block form cylinder'
        'match': '\\b(BLK FORM CYLINDER) ([XYZ]) (R)(\\d+) (L)(\\d+)( DIST)((\\+|-)\\d+)?( RI)(\\d+)?'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.constant'
            '4':
                'name': 'base.variable'
            '5':
                'name': 'base.keyword'
            '6':
                'name': 'base.variable'
            '7':
                'name': 'base.keyword'
            '8':
                'name': 'base.variable'
            '9':
                'name': 'base.variable'
            '10':
                'name': 'base.keyword'
            '11':
                'name': 'base.variable'
    },
    {
        'comment': 'block form rotational body'
        'match': '\\b(BLK FORM ROTATION) ([XYZ]) (DIM_[DR])'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.variable'
    },
    {
        'comment': 'cartesian coordinate with number or Q-parameter'
        'match': '\\b(I?[ABCXYZ]+)(\\+|-)((\\d+((\\.|,)\\d+)*)|(Q[LR]*[0-9]+))\\b'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.variable'
    }
    {
        'comment': 'polar coordinate with number or Q-parameter'
        'match': '\\b(I*PA|I*PR)(\\+|-)((\\d+((\\.|,)\\d+)*)|(Q[LR]*[0-9]+))'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.variable'
    },
    {
        'comment': 'Q-parameter (normal, string, lokal and remanent)'
        'match': '\\b((\\+|\\-)?Q[LSR]*[0-9]+)\\b'
        'name': 'base.variable'
    },
    {
        'comment': 'feedrate with number or Q-parameter'
        'match': '\\b(F)(MAX|Q[LR]*\\d+|\\d+| AUTO)\\b'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'spindle speed with number or Q-parameter'
        'match': '\\b(S)(Q[LR]*\\d+|\\d+)\\b'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'machine function'
        'match': '\\b(M)(\\d+)\\b'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'tool radius correction'
        'match': '\\b(R)(0[^(\\.|,)]|\\+|-|R|L)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'direction of rotation for circular motion'
        'match': '\\b(DR)(\\+|-)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'linear and circular motion'
        'match': '\\b(L[P]?|C[CPR]?|CT[P]?)\\b'
        'name': 'base.keyword'
    },
    {
        'comment': 'contour parts'
        'match': '\\b(RND R)((\\d+((\\.|,)\\d+)*)|(Q[LR]*[0-9]+))'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.variable'
    },
    {
        'comment': 'lable call with number of repititions'
        'match': '\\b(CALL LBL )((\\"\\w+\\")|(\\d+)|(Q[LSR]*[0-9]+))(\\sREP((\\d+)|(Q[LR]*[0-9]+)))?'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.constant'
            '3':
                'name': 'base.variable'
            '4':
                'name': 'base.variable'
            '5':
                'name': 'base.variable'
            '6':
                'name': 'base.constant'
            '7':
                'name': 'base.variable'
    },
    {
        'comment': 'lable definition'
        'match': '\\b(LBL )((\\"\\w+\\")|(\\d+))'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.constant'
            '3':
                'name': 'base.variable'
            '4':
                'name': 'base.variable'
    },
    {
        'comment': 'program call'
        'match': '\\b(CALL PGM) (.*)'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'tool definition'
        'match': '\\b(TOOL DEF) (.*)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.constant'
    },
    {
        'comment': 'tool call'
        'match': '\\b(TOOL CALL) (\\d+(\\.\\d+)?|\\"\\w+\\")( [XYZ]+)?'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.constant'
            '4':
                'name': 'base.constant'
            '5':
                'name': 'base.constant'
    },
    {
        'comment': 'cycle definition - old style'
        'match': '\\b(CYCL DEF) (\\d+\\.\\d+)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
    {
        'comment': 'cycle definition - new style'
        'match': '\\b(CYCL DEF) (\\d+) (.* ~)$'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.comment'
    },
    {
        'comment': 'cycle definition - new style - continuation'
        'match': '^\\s+(Q\\d+)(=)((\\+|-)(\\d+((\\.|,)\\d+)*)|(\\+|-)(Q[LR]*[0-9]+)| AUTO| MAX)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.variable'
            '4':
                'name': 'base.variable'
    },
    {
        'comment': 'cycle call'
        'match': '\\b(CYCL CALL( POS| PAT)?)'
        'name': 'base.keyword'
    },
    {
        'comment': 'program stop'
        'match': '\\b(STOP)'
        'name': 'base.keyword'
    },
    {
        'comment': 'special functions - TCPM'
        'match': '\\b(FUNCTION)( RESET)?( TCPM)( F (CONT|TCP) AXIS (POS|SPAT) PATHCTRL (AXIS|VECTOR))?'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.constant'
            '4':
                'name': 'base.variable'
    },
    {
        'comment': 'special functions - PLANE'
        #SPA+0 SPB+0 SPC+0 TURN FMAX SEQ+ TABLE ROT
        'match': '\\b(PLANE) (RESET|SPATIAL|PROJECTED|EULER|VECTOR|POINTS|RELATIV|AXIAL)?( MOVE DIST(\\d+))?'
        'captures':
            '1':
                'name': 'base.keyword'
            '2':
                'name': 'base.constant'
            '3':
                'name': 'base.variable'
            '4':
                'name': 'base.constant'
            '5':
                'name': 'base.constant'
            '6':
                'name': 'base.constant'
            '7':
                'name': 'base.constant'
            '8':
                'name': 'base.constant'    },

    {
        'comment': 'keywords for FN functions'
        'match': '\\b(FN )(\\d{1,2})(: )(IF|ERROR|F-PRINT|SYSREAD|PLC|WAIT FOR|EXPORT|TABOPEN|TABWRITE|TABREAD)?\\b'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
            '3':
                'name': 'base.none'
            '4':
                'name': 'base.variable'
    },
    {
        'comment': 'keywords for FN functions'
        'match': '\\b(SRC_|SEA_|(BEG(?!IN))|LEN)'
        'name': 'base.constant'
    },
    {
        'comment': 'keywords for FN functions'
        'match': '\\b(DECLARE STRING|STRCOMP|SUBSTR|STRLEN|INSTR)'
        'name': 'base.constant'
    },
    {
        'comment': 'keywords for FN functions'
        'match': '\\b(DIV|EQU|COS|SIN|TAN|LT|GT|GOTO)'
        'name': 'base.constant'
    },
    {
        'comment': 'keywords for FN functions'
        'match': '\\b(ID|NR|IDX)(\\d+)'
        'captures':
            '1':
                'name': 'base.constant'
            '2':
                'name': 'base.variable'
    },
]
